# -*- Makefile -*-

######################################################################
# USAGE:                                                             #
#                                                                    #
# make all: Build the MathComp library entirely,                     #
# make test-suite: Run the test suite,                               #
# make only TGTS="...vo": Build the selected libraries of MathComp.  #
#                                                                    #
# The rules this-config::, this-build::, this-only::,                #
# this-test-suite::, this-distclean::, pre-makefile::, this-clean::  #
# and __always__:: may be extended.                                  #
#                                                                    #
# Additionally, the following variables may be customized:           #
SUBDIRS?=
COQBIN?=$(dir $(shell which coqtop))
COQMAKEFILE?=$(COQBIN)coq_makefile
COQDEP?=$(COQBIN)coqdep
COQPROJECT?=_CoqProject
COQMAKEOPTIONS?=
COQMAKEFILEOPTIONS?=
V?=
VERBOSE?=V
TGTS?=
######################################################################

# local context: -----------------------------------------------------
.PHONY: all config build only test-suite clean distclean doc doc-clean __always__
.SUFFIXES:

H:= $(if $(VERBOSE),,@)  # not used yet
TOP     = $(dir $(lastword $(MAKEFILE_LIST)))
COQMAKE = $(MAKE) -f Makefile.coq $(COQMAKEOPTIONS)
COQMAKE_TESTSUITE = $(MAKE) -f Makefile.test-suite.coq $(COQMAKEOPTIONS)
BRANCH_coq:= $(shell $(COQBIN)coqtop -v | head -1 | grep -E '(trunk|master)' \
	      | wc -l | sed 's/ *//g')

# coq version:
ifneq "$(BRANCH_coq)" "0"
COQVVV:= dev
else
COQVVV:=$(shell $(COQBIN)coqtop --print-version | cut -d" " -f1)
endif

COQV:= $(shell echo $(COQVVV) | cut -d"." -f1)
COQVV:= $(shell echo $(COQVVV) | cut -d"." -f1-2)

# all: ---------------------------------------------------------------
all: config build

# Makefile.coq: ------------------------------------------------------
.PHONY: pre-makefile

Makefile.coq: pre-makefile $(COQPROJECT) Makefile
	$(COQMAKEFILE) $(COQMAKEFILEOPTIONS) -f $(COQPROJECT) -o Makefile.coq

# Test suite ---------------------------------------------------------

ifneq "$(TEST_SKIP_BUILD)" ""
TEST_DEP :=
MATHCOMP_PATH := -R test_suite mathcomp.test_suite
else
TEST_DEP := build
MATHCOMP_PATH := -R . mathcomp
endif

test_suite/test_hierarchy_all.v: $(TEST_DEP)
	COQBIN=$(COQBIN) ocaml ../etc/utils/hierarchy.ml -verify $(MATHCOMP_PATH) \
		-lib all_ssreflect \
		-lib all_algebra \
		-lib all_field \
		-lib all_character \
		-lib all_fingroup \
		-lib all_solvable \
		> test_suite/test_hierarchy_all.v

Makefile.test-suite.coq: test_suite/test_hierarchy_all.v
	$(COQMAKEFILE) $(COQMAKEFILEOPTIONS) -f Make.test-suite $(MATHCOMP_PATH) -o Makefile.test-suite.coq

# Global config, build, clean and distclean --------------------------
config: sub-config this-config

build: sub-build this-build

only: sub-only this-only

test-suite: sub-test-suite this-test-suite

clean: sub-clean this-clean doc-clean

distclean: sub-distclean this-distclean

# Local config, build, clean and distclean ---------------------------
.PHONY: this-config this-build this-only this-test-suite this-distclean this-clean

this-config:: __always__

this-build:: this-config Makefile.coq
	+$(COQMAKE)

this-only:: this-config Makefile.coq
	+$(COQMAKE) only "TGTS=$(TGTS)"

this-test-suite:: Makefile.test-suite.coq
	+$(COQMAKE_TESTSUITE)

this-distclean:: this-clean
	rm -f Makefile.coq Makefile.coq.conf
	rm -f Makefile.test-suite.coq Makefile.test-suite.coq.conf

this-clean:: __always__
	@if [ -f Makefile.coq ]; then $(COQMAKE) cleanall; fi
	@if [ -f Makefile.test-suite.coq ]; then $(COQMAKE_TESTSUITE) cleanall; fi

# Install target -----------------------------------------------------
.PHONY: install

install: __always__ Makefile.coq
	$(COQMAKE) install
# counting lines of Coq code -----------------------------------------
.PHONY: count

COQFILES = $(shell grep '.v$$' $(COQPROJECT))

count:
	@coqwc $(COQFILES) | tail -1 | \
	  awk '{printf ("%d (spec=%d+proof=%d)\n", $$1+$$2, $$1, $$2)}'
# Additionally cleaning backup (*~) files ----------------------------
this-distclean::
	rm -f $(shell find . -name '*~')

# Make in SUBDIRS ----------------------------------------------------
ifdef SUBDIRS
sub-%: __always__
	@set -e; for d in $(SUBDIRS); do +$(MAKE) -C $$d $(@:sub-%=%); done
else
sub-%: __always__
	@true
endif

# Make of individual .vo ---------------------------------------------
%.vo: __always__ Makefile.coq
	+$(COQMAKE) $@

test_suite/%.vo: __always__ Makefile.test-suite.coq
	+$(COQMAKE_TESTSUITE) $@

doc: __always__ Makefile.coq
	mkdir -p _build_doc/
	cp -r $(COQFILES) -t _build_doc/ --parents
	cp Make Makefile* _build_doc
	mkdir -p _build_doc/htmldoc
	. ../etc/utils/builddoc_lib.sh; \
		cd _build_doc && mangle_sources $(COQFILES)
	+cd _build_doc && $(COQMAKE)
	cd _build_doc && grep -v vio: .Makefile.coq.d > depend
	cd _build_doc && cat depend | ../../etc/buildlibgraph $(COQFILES) > htmldoc/depend.js
	cd _build_doc && $(COQBIN)coqdoc -t "Mathematical Components" \
		-g --utf8 -R . mathcomp \
		--parse-comments \
		--multi-index $(COQFILES) -d htmldoc
	. ../etc/utils/builddoc_lib.sh; \
		cd _build_doc && postprocess_html
	cp ../etc/artwork/coqdoc.css _build_doc/htmldoc

doc-clean:
	rm -rf _build_doc/
