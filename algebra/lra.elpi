% Type to contain the carrier type and structure instances attached to it
kind carrier type.
type carrier
  term ->        % Type
  term ->        % eqType
  term ->        % porderType
  term ->        % nmodType
  term ->        % zmodType
  term ->        % semiRingType
  term ->        % ringType
  term ->        % unitRingType
  option term -> % fieldType
  term ->        % realDomainType
  option term -> % realFieldType
  carrier.

pred carrier->rmorphism i:carrier, o:rmorphism.
carrier->rmorphism
  (carrier _ _ _ U V SR R UR F' _ _)
  (rmorphism U (some V) SR (some R) (some UR) F' (x\ x)) :- !.

pred carrier->type i:carrier, o:term.
carrier->type (carrier Ty _ _ _ _ _ _ _ _ _ _) Ty :- !.

pred carrier->eq i:carrier, o:term.
carrier->eq (carrier _ EQ _ _ _ _ _ _ _ _ _) EQ :- !.

pred carrier->porder i:carrier, o:term.
carrier->porder (carrier _ _ PO _ _ _ _ _ _ _ _) PO :- !.

pred carrier->semiring i:carrier, o:term.
carrier->semiring (carrier _ _ _ _ _ R _ _ _ _ _) R :- !.

pred carrier->realDomain i:carrier, o:term.
carrier->realDomain (carrier _ _ _ _ _ _ _ _ _ RD _) RD :- !.

pred carrier->realField i:carrier, o:term.
carrier->realField (carrier _ _ _ _ _ _ _ _ _ _ (some RF)) RF :- !.

pred mk-carrier i:term, o:carrier, o:list prop.
mk-carrier Ty (carrier Ty EQ PO U V SR R UR F' RD RF') Env :- std.do! [
  std.assert-ok! (coq.unify-eq Ty {{ Equality.sort lp:EQ }})
                 "Cannot find a declared eqType",
  std.assert-ok! (coq.unify-eq Ty (app [{coercion "porder_sort"}, _, PO]))
                 "Cannot find a declared porderType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.Nmodule.sort lp:U }})
                 "Cannot find a declared nmodType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.Zmodule.sort lp:V }})
                 "Cannot find a declared zmodType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.PzSemiRing.sort lp:SR }})
                 "Cannot find a declared semiRingType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.PzRing.sort lp:R }})
                 "Cannot find a declared ringType",
  std.assert-ok! (coq.unify-eq Ty {{ GRing.UnitRing.sort lp:UR }})
                 "Cannot find a declared unitRingType",
  std.assert-ok! (coq.unify-eq Ty {{ Num.RealDomain.sort lp:RD }})
                 "Cannot find a declared realDomainType",
  Env' = [push-inv, target-nmodule U, target-semiring SR,
          target-zmodule V, target-unitring UR,
          (pi C C' In OutM Out VM\
             quote.exprw C In OutM Out VM :- !,
               carrier->rmorphism C C', quote.ring ff C' In OutM Out VM)],
  if (coq.unify-eq Ty {{ GRing.Field.sort lp:F }} ok,
      coq.unify-eq Ty {{ Num.RealField.sort lp:RF }} ok)
     (F' = some F, RF' = some RF, Env = [field-mode|Env'])
     (F' = none, RF' = none, Env = Env')
].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parse goal (and hypotheses) to extract a realFieldType or realDomainType
% from (in)equalities it contains

% carrier type from a term of type bool
pred rfstr.bool i:term, o:carrier, o:list prop.
rfstr.bool {{ lp:Ty1 ==> lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ ~~ lp:Ty }} C Env :- !, rfstr.bool Ty C Env.
rfstr.bool {{ lp:Ty1 && lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ lp:Ty1 || lp:Ty2 }} C Env :- !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.bool {{ @Order.le lp:Disp lp:Ty _ _ }} C Env :- !,
  mk-carrier (app [{coercion "porder_sort"}, Disp, Ty]) C Env.
rfstr.bool {{ @Order.lt lp:Disp lp:Ty _ _ }} C Env :- !,
  mk-carrier (app [{coercion "porder_sort"}, Disp, Ty]) C Env.

% carrier type from a term of type Prop
pred rfstr.prop i:term, o:carrier, o:list prop.
rfstr.prop {{ lp:Ty1 -> lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ iff lp:Ty1 lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ ~ lp:Type }} C Env :- !, rfstr.prop Type C Env.
rfstr.prop {{ lp:Ty1 /\ lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ lp:Ty1 \/ lp:Ty2 }} C Env :- !,
  (rfstr.prop Ty2 C Env; rfstr.prop Ty1 C Env).
rfstr.prop {{ Datatypes.is_true lp:Ty }} C Env :- !, rfstr.bool Ty C Env.
rfstr.prop {{ @eq lp:Bool lp:Ty1 lp:Ty2 }} C Env :-
  coq.unify-eq Bool {{ bool }} ok, !,
  (rfstr.bool Ty2 C Env; rfstr.bool Ty1 C Env).
rfstr.prop {{ @eq lp:Ty _ _ }} C Env :- !, mk-carrier Ty C Env.

pred rfstr.hyps i:list prop, o:carrier, o:list prop.
rfstr.hyps [decl _ _ H|_] C Env :- rfstr.prop H C Env.
rfstr.hyps [_|Ctx] C Env :- rfstr.hyps Ctx C Env.

pred rfstr i:list prop, i:term, o:carrier, o:list prop.
rfstr _ Type C Env :- rfstr.prop Type C Env, !.
rfstr Ctx _ C Env :- rfstr.hyps {std.rev Ctx} C Env, !.
rfstr _ _ _ _ :- coq.ltac.fail 0 "Cannot find a realDomainType".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reification procedure

namespace quote {

% Constructors for reified terms

build.variable In {{ @PEX Q lp:In }} :- !.

build.zero {{ @PEc Q (Qmake Z0 xH) }} :- !.

build.opp In {{ @PEopp Q lp:In }} :- !.

build.add In1 In2 {{ @PEadd Q lp:In1 lp:In2 }} :- !.

build.sub In1 In2 {{ @PEsub Q lp:In1 lp:In2 }} :- !.

build.one {{ @PEc Q (Qmake (Zpos xH) xH) }} :- !.

build.mul In1 In2 {{ @PEmul Q lp:In1 lp:In2 }} :- !.

build.exp In1 In2 {{ @PEpow Q lp:In1 lp:In2 }} :- !.

build.invN-constant _ {{ N0 }} {{ @PEc Q (Qmake Z0 xH) }} :- !.
build.invN-constant Inv {{ Npos lp:In }} Out :- ground-pos In, !,
  if (quote.noinv Inv) (Out = {{ @PEc Q (Qmake (Zpos lp:In) xH) }})
    (Out = {{ @PEc Q (Qmake (Zpos xH) lp:In) }}).

% GFormula constructors
pred build.implb i:term, i:term, o:term.
build.implb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
            {{ X isBool (lp:In1 ==> lp:In2) }} :- !.
build.implb In1 In2 {{ IMPL lp:In1 None lp:In2 }} :- !.

pred build.andb i:term, i:term, o:term.
build.andb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isBool (lp:In1 && lp:In2) }} :- !.
build.andb In1 In2 {{ AND lp:In1 lp:In2 }} :- !.

pred build.orb i:term, i:term, o:term.
build.orb {{ X _ lp:In1 }} {{ X _ lp:In2 }}
          {{ X isBool (lp:In1 || lp:In2) }} :- !.
build.orb In1 In2 {{ OR lp:In1 lp:In2 }} :- !.

pred build.negb i:term, o:term.
build.negb {{ X _ lp:In1 }} {{ X isBool (~~ lp:In1) }} :- !.
build.negb In {{ NOT lp:In }} :- !.

pred build.implp i:term, i:term, o:term.
build.implp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
            {{ X isProp (lp:In1 -> lp:In2) }} :- !.
build.implp In1 In2 {{ IMPL lp:In1 None lp:In2 }} :- !.

pred build.iffp i:term, i:term, o:term.
build.iffp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isProp (iff lp:In1 lp:In2) }} :- !.
build.iffp In1 In2 {{ IFF lp:In1 lp:In2 }} :- !.

pred build.andp i:term, i:term, o:term.
build.andp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
           {{ X isProp (lp:In1 /\ lp:In2) }} :- !.
build.andp In1 In2 {{ AND lp:In1 lp:In2 }} :- !.

pred build.orp i:term, i:term, o:term.
build.orp {{ X _ lp:In1 }} {{ X _ lp:In2 }}
          {{ X isProp (lp:In1 \/ lp:In2) }} :- !.
build.orp In1 In2 {{ OR lp:In1 lp:In2 }} :- !.

pred build.negp i:term, o:term.
build.negp {{ X _ lp:In1 }} {{ X isProp (~ lp:In1) }} :- !.
build.negp In {{ NOT lp:In }} :- !.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% [quote.exprw C In OutM Out VM] reifies arithmetic expressions
% (should be instantiated by each tactic call)
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [C],
% - [OutM] is a reified expression of type [RExpr C],
% - [Out] is a reified expression of type [PExpr Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred exprw i:carrier, i:term, o:term, o:term, o:list term.

% [quote.bop2 C In OutM Out VM] reifies boolean (in)equalities
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [bool],
% - [OutM] is a reified expression of type [RFormula C],
% - [Out] is a reified expression of type [Formula Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred bop2 i:carrier, i:term, o:term, o:term, o:list term.
bop2 C {{ @Order.le _ lp:O lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpLe lp:YM' }}
     {{ Build_Formula lp:X' OpLe lp:Y' }} VM :-
  coq.unify-eq { carrier->porder C } O ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.
bop2 C {{ @Order.lt _ lp:O lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpLt lp:YM' }}
     {{ Build_Formula lp:X' OpLt lp:Y' }} VM :-
  coq.unify-eq { carrier->porder C } O ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.
bop2 C {{ @eq_op lp:T lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpEq lp:YM' }}
     {{ Build_Formula lp:X' OpEq lp:Y' }} VM :-
  coq.unify-eq { carrier->eq C } T ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.

% [quote.pop2 C In OutM Out VM] reifies (in)equalities of type Prop
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [Prop],
% - [OutM] is a reified expression of type [RFormula C],
% - [Out] is a reified expression of type [Formula Q], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred pop2 i:carrier, i:term, o:term, o:term, o:list term.
pop2 C {{ Datatypes.is_true lp:E }} OutM Out VM :- bop2 C E OutM Out VM.
pop2 C {{ @eq lp:T lp:X lp:Y }}
     {{ Build_RFormula lp:XM' OpEq lp:YM' }}
     {{ Build_Formula lp:X' OpEq lp:Y' }} VM :-
  coq.unify-eq { carrier->type C } T ok, !,
  exprw C X XM' X' VM, !, exprw C Y YM' Y' VM.

% [quote.boolean C In OutM Out VM] reifies boolean formulas
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [bool],
% - [OutM] is a reified formula of type [BFormula (RFormula C) isBool],
% - [Out] is a reified formula of type [BFormula (Formula Q) isBool], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred boolean i:carrier, i:term, o:term, o:term, o:list term.
boolean C {{ lp:In1 ==> lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.implb OutM1 OutM2 OutM, build.implb Out1 Out2 Out].
boolean C {{ lp:In1 && lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.andb OutM1 OutM2 OutM, build.andb Out1 Out2 Out].
boolean C {{ lp:In1 || lp:In2 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, boolean C In2 OutM2 Out2 VM,
   build.orb OutM1 OutM2 OutM, build.orb Out1 Out2 Out].
boolean C {{ ~~ lp:In1 }} OutM Out VM :- !, std.do!
  [boolean C In1 OutM1 Out1 VM, build.negb OutM1 OutM, build.negb Out1 Out].
boolean _ {{ true }} {{ TT isBool }} {{ TT isBool }} _ :- !.
boolean _ {{ false }} {{ FF isBool }} {{ FF isBool }} _ :- !.
boolean C In {{ A isBool lp:OutM tt }} {{ A isBool lp:Out tt }} VM :-
  bop2 C In OutM Out VM.
boolean _ In {{ X isBool lp:In }} {{ X isBool lp:In }} _ :- !.

% [quote.proposition C In OutM Out VM] reifies formulas of type Prop
% - [C] is the carrier type and structure instances,
% - [In] is a term of type [Prop],
% - [OutM] is a reified formula of type [BFormula (RFormula C) isProp],
% - [Out] is a reified formula of type [BFormula (Formula Q) isProp], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred proposition i:carrier, i:term, o:term, o:term, o:list term.
proposition C {{ lp:In1 -> lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.implp OutM1 OutM2 OutM, build.implp Out1 Out2 Out].
proposition C {{ iff lp:In1 lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.iffp OutM1 OutM2 OutM, build.iffp Out1 Out2 Out].
proposition C {{ lp:In1 /\ lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.andp OutM1 OutM2 OutM, build.andp Out1 Out2 Out].
proposition C {{ lp:In1 \/ lp:In2 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, proposition C In2 OutM2 Out2 VM,
   build.orp OutM1 OutM2 OutM, build.orp Out1 Out2 Out].
proposition C {{ ~ lp:In1 }} OutM Out VM :- !, std.do!
  [proposition C In1 OutM1 Out1 VM, build.negp OutM1 OutM, build.negp Out1 Out].
proposition _ {{ True }} {{ TT isProp }} {{ TT isProp }} _ :- !.
proposition _ {{ False }} {{ FF isProp }} {{ FF isProp }} _ :- !.
proposition C {{ Datatypes.is_true lp:In1 }}
           {{ EQ lp:OutM1 (TT isBool) }} {{ EQ lp:Out1 (TT isBool) }} VM :- !,
  boolean C In1 OutM1 Out1 VM, !.
proposition C {{ @eq lp:Bool lp:In1 lp:In2 }} OutM Out VM :-
  coq.unify-eq Bool {{ bool }} ok, !,
  boolean C In1 OutM1 Out1 VM, !, boolean C In2 OutM2 Out2 VM, !,
  OutM = {{ EQ lp:OutM1 lp:OutM2 }}, !, Out = {{ EQ lp:Out1 lp:Out2 }}.
proposition C In {{ A isProp lp:OutM tt }} {{ A isProp lp:Out tt }} VM :-
  pop2 C In OutM Out VM.
proposition _ In {{ X isProp lp:In }} {{ X isProp lp:In }} _ :- !.

% [quote.goal C Ctx Goal Goal' NS OutM Out VM] reifies the goal [Goal],
% including the arithmetic hypotheses in the context [Ctx], in the form of
% implication chain
% - [C] is the carrier type and structure instances,
% - [Ctx] is the context (hypotheses),
% - [Goal] is the goal, of type [Prop],
% - [Goal'] is a chain of implications including [Goal] and hypotheses in [Hyps]
%   that have some arithmetic contents,
% - [NS] are the names of arithmetic hypotheses in [Ctx] added to [Goal'],
% - [OutM] is the reified term of type [BFormula (RFormula C) isProp],
% - [ReifiedOut] is the reified term of type [BFormula (Formula Q) isProp], and
% - [VM] is a variable map, that is a list of terms of type [C].
pred goal i:carrier, i:list prop, i:term,
          o:term, o:list term, o:term, o:term, o:list term.
goal C [decl N _ In1|Ctx] Type {{ lp:In1 -> lp:Type' }} [N|NS]
           {{ IMPL lp:OutM1 None lp:OutM2 }}
           {{ IMPL lp:Out1 None lp:Out2 }} VM :-
  proposition C In1 OutM1 Out1 VM, not (Out1 = {{ X _ _ }}), !,
  goal C Ctx Type Type' NS OutM2 Out2 VM.
goal C [_|Ctx] Type Type' NS OutM Out VM :- !,
  goal C Ctx Type Type' NS OutM Out VM.
goal C [] Type Type [] OutM Out VM :- !, proposition C Type OutM Out VM.

} % namespace quote

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main tactic

% [exfalso_if_not_prop In Out Bool] changes [In] to [False]
% when [In] is not a [Prop] (and then set [Bool] to [tt])
pred exfalso_if_not_prop i:term, o:term, o:bool.
exfalso_if_not_prop Type Type ff :- coq.typecheck Type {{ Prop }} ok.
exfalso_if_not_prop _ {{ False }} tt.

pred gen-witness i:string, i:argument, i:term, i:goal, o:sealed-goal.
gen-witness TacW N Out G G' :- coq.ltac.call TacW [N, trm Out] G [G'].
gen-witness _ _ _ _ _ :- coq.ltac.fail 0 "Cannot find witness".

pred lra-reflection i:string, i:term, i:term, i:term, i:term, i:term,
                    i:goal, i:sealed-goal, o:list sealed-goal.
lra-reflection Tac C Hyps OutM Out VM G G' GS :-
  coq.ltac.set-goal-arguments
    [trm C, trm Hyps, trm OutM, trm Out, trm VM] G G' G'',
  coq.ltac.open (g\ gs\ sigma Wit Args Args'\
    % NB: the following line is very specific to the current implementation of
    % the witness generators. We assume that the witness appears as the first
    % item of the context.
    g = goal [def Wit _ _ _|_] _ _ _ Args,
    std.append Args [trm Wit] Args',
    coq.ltac.call Tac Args' g gs) G'' GS.
lra-reflection _ _ _ _ _ _ _ _ _ :-
  coq.ltac.fail 0 "Reflection failed, this is a bug".

% The tactic takes four arguments:
% - [TacW] is the name of the Ltac1 tactic that generates the witness,
% - [TacF] and [TacR] are the names of the Ltac1 tactics to call respectively
%   in the [realFieldType] and [realDomainType] cases, and
% - [N] is passed as is as the first argument of [TacW].
% The [TacW] tactic will receive [N] and the reified term [Out], explained
% below, and the [TacF] or [TacR] tactic will receive six arguments:
% - [N] above,
% - [Hyps] a function of type
%   [(H1 -> ... -> Hn -> G) -> G] (if [G] is a [Prop]) or
%   [(H1 -> ... -> Hn -> False) -> G] (if [G] is not a [Prop])
%   that explicitly passes hypotheses of types [H1], ..., [Hn] taken from the
%   context to the reflexive proof,
% - [OutM] the reified goal as a [BFormula RFormula isProp],
% - [Out] the reified goal as a [BFormula (Formula Q) isProp], and
% - [VM'] a variable map, giving the interpretation to variables in [Out]
%   it is of type [VarMap.t C] where [C] is the carrier for the detected
%   [realFieldType] or [realDomainType].
solve (goal Ctx _ Type _ [str TacW, str TacF, str TacR, N] as G) GS :- std.do! [
  exfalso_if_not_prop Type Type' Efalso,
  rfstr Ctx Type' C Env,
  Env => quote.goal C Ctx Type' Type'' NS OutM Out VM,  /* use =!=> when requiring elpi >= 3 */
  carrier->semiring C R,
  std.assert-ok!
    (coq.typecheck OutM {{ BFormula (@RFormula lp:R) isProp }})
    "The reification produced an ill-typed result, this is a bug",
  std.assert-ok!
    (coq.typecheck Out {{ BFormula (Formula Q) isProp }})
    "The reification produced an ill-typed result, this is a bug",
  gen-witness TacW N Out G G',
  list-constant { carrier->type C } VM VM',
  if (Efalso = tt)
     (Hyps = fun _ Type'' (x \ app [{{ False_rect }}, Type, app [x|NS]]))
     (Hyps = fun _ Type'' (x \ app [x|NS])),
  ((carrier->realField C C', Tac = TacF);
   (carrier->realDomain C C', Tac = TacR)),
  lra-reflection Tac C' Hyps OutM Out VM' G G' GS ].
